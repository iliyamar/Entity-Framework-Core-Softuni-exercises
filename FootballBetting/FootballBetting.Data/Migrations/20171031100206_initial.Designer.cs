// <auto-generated />
using FootballBetting.Data;
using FootballBetting.DomainClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FootballBetting.Data.Migrations
{
    [DbContext(typeof(FootbalBettingContext))]
    [Migration("20171031100206_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FootballBetting.DomainClasses.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BetMoney");

                    b.Property<DateTime>("DateTimeOfBet");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.BetGame", b =>
                {
                    b.Property<int>("BetId");

                    b.Property<int>("GameId");

                    b.Property<int>("ResultPredictionId");

                    b.HasKey("BetId", "GameId");

                    b.HasIndex("GameId");

                    b.HasIndex("ResultPredictionId");

                    b.ToTable("BetGames");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetitionTypeId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionTypeId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.CompetitionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CompetitionTypes");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.CountryContinent", b =>
                {
                    b.Property<int>("ContinentId");

                    b.Property<int>("CountryId");

                    b.Property<string>("CountryId1");

                    b.HasKey("ContinentId", "CountryId");

                    b.HasIndex("CountryId1");

                    b.ToTable("CountriesContinents");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AwayTeamGoals");

                    b.Property<int>("AwayTeamId");

                    b.Property<double>("AwayWinTeamBetRate");

                    b.Property<int?>("AwayYeamId");

                    b.Property<int>("CompetitionId");

                    b.Property<double>("DrawGameBetRate");

                    b.Property<DateTime>("GameDateAndTime");

                    b.Property<int>("HomeTeamGoals");

                    b.Property<int>("HomeTeamId");

                    b.Property<double>("HomeWinTeamBetRate");

                    b.Property<int>("RoundId");

                    b.HasKey("Id");

                    b.HasIndex("AwayYeamId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RoundId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsInjured");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PositionId")
                        .IsRequired();

                    b.Property<string>("PosititonId")
                        .IsRequired();

                    b.Property<int>("SquadNumber");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.PlayerStatistic", b =>
                {
                    b.Property<int>("GameId");

                    b.Property<int>("PlayerId");

                    b.Property<int>("Assists");

                    b.Property<int>("MinutesPlayed");

                    b.Property<int>("ScoredGoals");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayersStatistics");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Position", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PositionDescription");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.ResultPrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Prediction");

                    b.HasKey("Id");

                    b.ToTable("ResultPredictions");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Budget");

                    b.Property<int>("HomeTownId");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<byte[]>("Logo");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PrimaryColorId");

                    b.Property<int>("SecondaryColorId");

                    b.HasKey("Id");

                    b.HasIndex("HomeTownId");

                    b.HasIndex("PrimaryColorId");

                    b.HasIndex("SecondaryColorId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Balance");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Bet", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.BetGame", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.Bet", "Bet")
                        .WithMany("Games")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.DomainClasses.Game", "Game")
                        .WithMany("Bets")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.DomainClasses.ResultPrediction", "ResultPrediction")
                        .WithMany()
                        .HasForeignKey("ResultPredictionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Competition", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.CompetitionType", "CompetitionType")
                        .WithMany()
                        .HasForeignKey("CompetitionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.CountryContinent", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.Continent", "Continent")
                        .WithMany("Counties")
                        .HasForeignKey("ContinentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.DomainClasses.Country", "Country")
                        .WithMany("Continents")
                        .HasForeignKey("CountryId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Game", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.Team", "AwayYeam")
                        .WithMany()
                        .HasForeignKey("AwayYeamId");

                    b.HasOne("FootballBetting.DomainClasses.Competition", "Competition")
                        .WithMany("Games")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.DomainClasses.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.DomainClasses.Round", "Round")
                        .WithMany("Games")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Player", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.DomainClasses.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.PlayerStatistic", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.Game", "Game")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.DomainClasses.Player", "Player")
                        .WithMany("GameStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Team", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.Town", "HomeTown")
                        .WithMany()
                        .HasForeignKey("HomeTownId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FootballBetting.DomainClasses.Color", "PrimaryColor")
                        .WithMany("HomeTeams")
                        .HasForeignKey("PrimaryColorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FootballBetting.DomainClasses.Color", "SecondaryColor")
                        .WithMany("GuestTeams")
                        .HasForeignKey("SecondaryColorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FootballBetting.DomainClasses.Town", b =>
                {
                    b.HasOne("FootballBetting.DomainClasses.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
